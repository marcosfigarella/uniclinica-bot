const express = require('express');
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const QRCode = require('qrcode');
const cron = require('node-cron');

const app = express();

// Vari√°vel para armazenar o QR Code
let qrCodeData = '';
let qrCodeImage = '';
let isClientReady = false;

// Armazenar informa√ß√µes dos usu√°rios
let userSessions = {};

// Fun√ß√£o para obter pr√≥ximos dias √∫teis dispon√≠veis
function getNextAvailableDays(count = 7) {
    const days = [];
    const today = new Date();
    let currentDate = new Date(today);
    currentDate.setDate(currentDate.getDate() + 1); // Come√ßar do pr√≥ximo dia
    
    while (days.length < count) {
        const dayOfWeek = currentDate.getDay();
        
        // Segunda a sexta (1-5) ou s√°bado at√© 12h (6)
        if (dayOfWeek >= 1 && dayOfWeek <= 6) {
            const dateStr = currentDate.toLocaleDateString('pt-BR', {
                weekday: 'long',
                day: '2-digit',
                month: '2-digit'
            });
            days.push({
                date: new Date(currentDate),
                formatted: dateStr.charAt(0).toUpperCase() + dateStr.slice(1)
            });
        }
        
        currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return days;
}

// Fun√ß√£o para obter hor√°rios dispon√≠veis (simulado - depois integrar com Google Calendar)
function getAvailableSlots(date) {
    const dayOfWeek = date.getDay();
    
    if (dayOfWeek === 6) { // S√°bado
        return ['08:00', '09:00', '10:00', '11:00'];
    } else { // Segunda a sexta
        return ['08:00', '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'];
    }
}

// Rota principal
app.get('/', (req, res) => {
    res.send(`
        <h1>Camila - Secret√°ria Dr. Marcos Figarella</h1>
        <p>WhatsApp Status: ${isClientReady ? 'Conectado ‚úÖ' : 'Aguardando conex√£o ‚è≥'}</p>
        <a href="/whatsapp">Ver QR Code WhatsApp</a>
    `);
});

// Rota para exibir QR Code
app.get('/whatsapp', (req, res) => {
    if (isClientReady) {
        res.send(`
            <h1>WhatsApp Conectado! ‚úÖ</h1>
            <p>A Camila est√° funcionando normalmente.</p>
            <a href="/">Voltar</a>
        `);
    } else if (qrCodeImage) {
        res.send(`
            <html>
            <head>
                <title>QR Code WhatsApp</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
                    .qr-container { margin: 20px auto; }
                    .instructions { max-width: 500px; margin: 20px auto; text-align: left; }
                    .qr-image { border: 2px solid #25D366; padding: 10px; border-radius: 10px; }
                </style>
            </head>
            <body>
                <h1>üì± Conectar WhatsApp</h1>
                <div class="instructions">
                    <p><strong>Como conectar:</strong></p>
                    <ol>
                        <li>Abra o WhatsApp no seu celular</li>
                        <li>Toque nos 3 pontinhos (‚ãÆ) no canto superior direito</li>
                        <li>Selecione "Dispositivos conectados"</li>
                        <li>Toque em "Conectar um dispositivo"</li>
                        <li>Escaneie o QR Code abaixo</li>
                    </ol>
                </div>
                <div class="qr-container">
                    <img src="${qrCodeImage}" alt="QR Code WhatsApp" class="qr-image" />
                </div>
                <p><em>O QR Code expira em alguns minutos. Recarregue a p√°gina se necess√°rio.</em></p>
                <button onclick="location.reload()">üîÑ Atualizar QR Code</button>
                <br><br>
                <a href="/">‚Üê Voltar</a>
            </body>
            </html>
        `);
    } else {
        res.send(`
            <html>
            <head>
                <title>WhatsApp - Aguardando</title>
                <meta http-equiv="refresh" content="5">
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
                </style>
            </head>
            <body>
                <h1>‚è≥ Aguardando QR Code...</h1>
                <p>O QR Code ser√° gerado em instantes...</p>
                <p><em>Esta p√°gina ser√° atualizada automaticamente em 5 segundos.</em></p>
                <a href="/">‚Üê Voltar</a>
            </body>
            </html>
        `);
    }
});

// Configura√ß√£o do cliente WhatsApp
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu'
        ]
    }
});

// Evento QR Code
client.on('qr', async (qr) => {
    qrCodeData = qr;
    isClientReady = false;
    
    try {
        qrCodeImage = await QRCode.toDataURL(qr, {
            width: 256,
            margin: 2,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            }
        });
        console.log('QR Code gerado! Acesse /whatsapp para visualizar');
    } catch (error) {
        console.error('Erro ao gerar QR Code:', error);
    }
    
    qrcode.generate(qr, {small: true});
});

// Evento quando cliente est√° pronto
client.on('ready', () => {
    console.log('WhatsApp Client is ready!');
    isClientReady = true;
    qrCodeData = '';
    qrCodeImage = '';
});

// Fun√ß√£o para extrair nome da mensagem
function extractName(message) {
    const words = message.split(' ');
    const nameIndicators = ['nome', 'chamo', 'sou'];
    
    for (let i = 0; i < words.length; i++) {
        if (nameIndicators.some(indicator => words[i].toLowerCase().includes(indicator))) {
            if (words[i + 1]) {
                return words[i + 1].charAt(0).toUpperCase() + words[i + 1].slice(1).toLowerCase();
            }
        }
    }
    
    for (let word of words) {
        if (word.length > 2 && /^[A-Za-z]+$/.test(word)) {
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }
    }
    
    return null;
}

// Evento para mensagens recebidas
client.on('message', async message => {
    console.log(`Mensagem recebida: ${message.body}`);
    
    const userId = message.from;
    const msgLower = message.body.toLowerCase();
    
    // Inicializar sess√£o do usu√°rio se n√£o existir
    if (!userSessions[userId]) {
        userSessions[userId] = {
            name: null,
            hasIntroduced: false,
            awaitingName: false,
            schedulingStep: null,
            selectedDate: null,
            selectedTime: null
        };
    }
    
    const userSession = userSessions[userId];
    
    // Tentar extrair nome da mensagem atual
    const extractedName = extractName(message.body);
    if (extractedName && !userSession.name) {
        userSession.name = extractedName;
        userSession.awaitingName = false;
    }
    
    // Sauda√ß√µes iniciais - primeira intera√ß√£o
    if (!userSession.hasIntroduced && (
        msgLower.includes('oi') || msgLower.includes('ol√°') || msgLower.includes('ola') || 
        msgLower.includes('bom dia') || msgLower.includes('boa tarde') || msgLower.includes('boa noite') ||
        msgLower.includes('al√¥') || msgLower.includes('alo') || msgLower.includes('ei') ||
        msgLower.includes('hello') || msgLower.includes('opa') || msgLower.includes('oie'))) {
        
        userSession.hasIntroduced = true;
        
        if (userSession.name) {
            message.reply(`Ol√° ${userSession.name}! üòä Que alegria receber seu contato! Eu sou a Camila, secret√°ria do Dr. Marcos Figarella! Estou muito feliz em poder te ajudar hoje! Como posso te auxiliar? ‚ù§Ô∏è`);
        } else {
            userSession.awaitingName = true;
            message.reply('Ol√°! üòä Que alegria receber seu contato! Eu sou a Camila, secret√°ria do Dr. Marcos Figarella! Estou muito feliz em falar com voc√™! Para te atender melhor, qual √© o seu nome? ‚ù§Ô∏è');
        }
    }
    
    // Se est√° aguardando o nome
    else if (userSession.awaitingName && !userSession.name) {
        const name = extractName(message.body);
        if (name) {
            userSession.name = name;
            userSession.awaitingName = false;
            message.reply(`Muito prazer, ${name}! üòä Agora posso te atender com todo carinho! Como posso te ajudar hoje? ‚ù§Ô∏è`);
        } else {
            message.reply('Desculpe, n√£o consegui entender seu nome. Pode me dizer novamente, por favor? Por exemplo: "Meu nome √© Jo√£o" ou "Me chamo Maria" üòä');
        }
    }
    
    // Agendamentos
    else if (msgLower.includes('agendar') || msgLower.includes('consulta') || msgLower.includes('marcar') ||
             msgLower.includes('quero marcar') || msgLower.includes('quero agendar') || 
             msgLower.includes('gostaria de marcar') || msgLower.includes('gostaria de agendar') ||
             msgLower.includes('preciso marcar') || msgLower.includes('preciso agendar') ||
             msgLower.includes('como fa√ßo para marcar') || msgLower.includes('como marco') ||
             msgLower.includes('como agendo') || msgLower.includes('queria marcar') ||
             msgLower.includes('queria agendar') || msgLower.includes('posso marcar') ||
             msgLower.includes('posso agendar') || msgLower.includes('agenda')) {
        
        const greeting = userSession.name ? `${userSession.name}, que` : 'Que';
        userSession.schedulingStep = 'choosing_date';
        
        const availableDays = getNextAvailableDays();
        let daysText = '';
        availableDays.forEach((day, index) => {
            daysText += `${index + 1}. ${day.formatted}\n`;
        });
        
        message.reply(`${greeting} maravilha! Fico muito feliz em ajudar voc√™ com o agendamento do Dr. Marcos! üòäüìÖ\n\nO Dr. Marcos atende:\n‚Ä¢ Psiquiatria\n‚Ä¢ Sa√∫de Mental\n‚Ä¢ Avalia√ß√µes psiqui√°tricas\n\n*Dias dispon√≠veis:*\n${daysText}\nDigite o n√∫mero do dia que voc√™ prefere! ‚ù§Ô∏è`);
    }
    
    // Verificar disponibilidade de dias
    else if (msgLower.includes('dispon√≠vel') || msgLower.includes('disponivel') || 
             msgLower.includes('dias') || msgLower.includes('quando') ||
             msgLower.includes('hor√°rios') || msgLower.includes('horarios') ||
             msgLower.includes('vagas') || msgLower.includes('agenda livre')) {
        
        const greeting = userSession.name ? `${userSession.name}, vou` : 'Vou';
        
        const availableDays = getNextAvailableDays();
        let daysText = '';
        availableDays.forEach((day, index) => {
            daysText += `${index + 1}. ${day.formatted}\n`;
        });
        
        message.reply(`${greeting} verificar a agenda do Dr. Marcos para voc√™! üòäüìÖ\n\n*Pr√≥ximos dias dispon√≠veis:*\n${daysText}\nQual dia voc√™ gostaria de agendar? Digite o n√∫mero! ‚ù§Ô∏è`);
    }
    
    // Processar escolha de data (n√∫meros de 1-7)
    else if (userSession.schedulingStep === 'choosing_date' && /^[1-7]$/.test(message.body.trim())) {
        const dayIndex = parseInt(message.body.trim()) - 1;
        const availableDays = getNextAvailableDays();
        
        if (dayIndex >= 0 && dayIndex < availableDays.length) {
            const selectedDay = availableDays[dayIndex];
            userSession.selectedDate = selectedDay.date;
            userSession.schedulingStep = 'choosing_time';
            
            // Obter hor√°rios dispon√≠veis para o dia selecionado
            const availableSlots = getAvailableSlots(selectedDay.date);
            
            let timesText = '';
            availableSlots.forEach((time, index) => {
                timesText += `${index + 1}. ${time}\n`;
            });
            
            const greeting = userSession.name ? `${userSession.name}, perfeito!` : 'Perfeito!';
            message.reply(`${greeting} Voc√™ escolheu ${selectedDay.formatted}! üòä\n\n*Hor√°rios dispon√≠veis:*\n${timesText}\nDigite o n√∫mero do hor√°rio que voc√™ prefere! ‚è∞`);
        } else {
            message.reply('Por favor, digite um n√∫mero v√°lido de 1 a 7 correspondente ao dia que voc√™ deseja! üòä');
        }
    }
    
    // Processar escolha de hor√°rio
    else if (userSession.schedulingStep === 'choosing_time' && /^[1-8]$/.test(message.body.trim())) {
        const timeIndex = parseInt(message.body.trim()) - 1;
        const availableSlots = getAvailableSlots(userSession.selectedDate);
        
        if (timeIndex >= 0 && timeIndex < availableSlots.length) {
            const selectedTime = availableSlots[timeIndex];
            userSession.selectedTime = selectedTime;
            userSession.schedulingStep = 'confirming';
            
            const dateStr = userSession.selectedDate.toLocaleDateString('pt-BR', {
                weekday: 'long',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
            
            const greeting = userSession.name ? `${userSession.name}, √≥tima` : '√ìtima';
            message.reply(`${greeting} escolha! üòä\n\n*Resumo do agendamento:*\nüìÖ Data: ${dateStr}\n‚è∞ Hor√°rio: ${selectedTime}\nüë®‚Äç‚öïÔ∏è Dr. Marcos Figarella\n\nPara confirmar, preciso do seu:\n‚Ä¢ Telefone de contato\n‚Ä¢ Se √© primeira consulta ou retorno\n\nPode me passar essas informa√ß√µes? ‚ù§Ô∏è`);
        } else {
            message.reply('Por favor, digite um n√∫mero v√°lido correspondente ao hor√°rio que voc√™ deseja! üòä');
        }
    }
    
    // Confirma√ß√£o final do agendamento
    else if (userSession.schedulingStep === 'confirming') {
        const greeting = userSession.name ? `${userSession.name}, perfeito!` : 'Perfeito!';
        
        const dateStr = userSession.selectedDate.toLocaleDateString('pt-BR', {
            weekday: 'long',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        
        // Resetar sess√£o de agendamento
        userSession.schedulingStep = null;
        userSession.selectedDate = null;
        userSession.selectedTime = null;
        
        message.reply(`${greeting} Sua consulta foi agendada com sucesso! üéâ\n\n*Detalhes da consulta:*\nüë§ Paciente: ${userSession.name}\nüìÖ Data: ${dateStr}\n‚è∞ Hor√°rio: ${userSession.selectedTime}\nüë®‚Äç‚öïÔ∏è Dr. Marcos Figarella\nüì± Contato: ${message.body}\n\n*Importante:*\n‚Ä¢ Chegue 15 minutos antes\n‚Ä¢ Traga documento com foto\n‚Ä¢ Em caso de cancelamento, avise com 24h de anteced√™ncia\n\nAt√© breve! ‚ù§Ô∏è`);
    }
    
    // Informa√ß√µes gerais
    else if (msgLower.includes('informa√ß√µes') || msgLower.includes('informacoes') ||
             msgLower.includes('quero mais informa√ß√µes') || msgLower.includes('quero mais informacoes') ||
             msgLower.includes('gostaria de informa√ß√µes') || msgLower.includes('preciso de informa√ß√µes') ||
             msgLower.includes('me fale sobre') || msgLower.includes('conte sobre') ||
             msgLower.includes('quero saber') || msgLower.includes('gostaria de saber') ||
             msgLower.includes('como funciona') || msgLower.includes('me explica') ||
             msgLower.includes('detalhes') || msgLower.includes('informa√ß√£o') ||
             msgLower.includes('informacao') || msgLower.includes('esclarecer') ||
             msgLower.includes('d√∫vida') || msgLower.includes('duvida') ||
             msgLower.includes('ajuda') || msgLower.includes('orienta√ß√£o') ||
             msgLower.includes('orientacao')) {
        
        const greeting = userSession.name ? `${userSession.name}, fico` : 'Fico';
        message.reply(`${greeting} muito feliz em esclarecer tudo para voc√™! üòä\n\nPosso te dar informa√ß√µes sobre:\n\nüìÖ *Agendamentos*\n‚Ä¢ Como marcar consultas\n‚Ä¢ Hor√°rios dispon√≠veis\n‚Ä¢ Reagendamentos\n\nüë®‚Äç‚öïÔ∏è *Dr. Marcos Figarella*\n‚Ä¢ Atendimento em Psiquiatria\n‚Ä¢ Sa√∫de Mental\n\nüè• *Consult√≥rio*\n‚Ä¢ Endere√ßo e localiza√ß√£o\n‚Ä¢ Hor√°rios de funcionamento\n\nüí∞ *Valores e Conv√™nios*\n‚Ä¢ Pre√ßos das consultas\n‚Ä¢ Conv√™nios aceitos\n\nSobre o que voc√™ gostaria de saber? ‚ù§Ô∏è`);
    }
    
    // Dr. Marcos e suas especialidades
    else if (msgLower.includes('psiquiatria') || msgLower.includes('psiquiatra') || 
             msgLower.includes('marcos') || msgLower.includes('dr marcos') ||
             msgLower.includes('doutor marcos') || msgLower.includes('m√©dico') ||
             msgLower.includes('medico') || msgLower.includes('saude mental') ||
             msgLower.includes('sa√∫de mental') || msgLower.includes('doutor') ||
             msgLower.includes('especialidade') || msgLower.includes('atende') ||
             msgLower.includes('trata')) {
        
        const greeting = userSession.name ? `${userSession.name}, que` : 'Que';
        message.reply(`${greeting} alegria falar sobre o Dr. Marcos! üòä Ele atende Psiquiatria e Sa√∫de Mental com muito carinho e dedica√ß√£o! üë®‚Äç‚öïÔ∏è\n\n*O Dr. Marcos atende:*\n‚Ä¢ Psiquiatria Geral\n‚Ä¢ Sa√∫de Mental\n‚Ä¢ Transtornos de Humor\n‚Ä¢ Ansiedade e Depress√£o\n‚Ä¢ Avalia√ß√µes Psiqui√°tricas\n\nEle tem uma abordagem muito acolhedora! Gostaria de agendar uma consulta? ‚ù§Ô∏è`);
    }
    
    // Localiza√ß√£o e endere√ßo
    else if (msgLower.includes('endere√ßo') || msgLower.includes('endereco') || 
             msgLower.includes('localiza√ß√£o') || msgLower.includes('localizacao') ||
             msgLower.includes('onde fica') || msgLower.includes('local') ||
             msgLower.includes('lugar') || msgLower.includes('como chegar') ||
             msgLower.includes('fica onde') || msgLower.includes('localizar')) {
        
        const greeting = userSession.name ? `${userSession.name}, fico` : 'Fico';
        message.reply(`${greeting} feliz em te passar a localiza√ß√£o! üòäüìç\n\nO consult√≥rio do Dr. Marcos fica na Unicl√≠nica!\n\n*Endere√ßo:* [INSERIR ENDERE√áO AQUI]\n\nTemos estacionamento e fica em um local muito acess√≠vel! Se tiver qualquer d√∫vida sobre como chegar, me chama! ‚ù§Ô∏è`);
    }
    
    // Hor√°rios de funcionamento
    else if (msgLower.includes('funciona') || msgLower.includes('funcionamento') ||
             msgLower.includes('aberto') || msgLower.includes('fechado') ||
             msgLower.includes('que horas') || msgLower.includes('at√© que horas') ||
             msgLower.includes('ate que horas') || msgLower.includes('abre') ||
             msgLower.includes('fecha') || msgLower.includes('expediente')) {
        
        const greeting = userSession.name ? `${userSession.name}, te` : 'Te';
        message.reply(`${greeting} passo os hor√°rios com muito prazer! ÔøΩÔøΩ‚è∞\n\n*Hor√°rios de atendimento do Dr. Marcos:*\nüïê *Segunda a Sexta:* 08h √†s 18h\nüïê *S√°bado:* 08h √†s 12h\nüö´ *Domingo:* Fechado\n\nEstou sempre aqui para organizar sua agenda! ‚ù§Ô∏è`);
    }
    
    // Valores, pre√ßos e conv√™nios
    else if (msgLower.includes('valor') || msgLower.includes('pre√ßo') || msgLower.includes('preco') || 
             msgLower.includes('conv√™nio') || msgLower.includes('convenio') || msgLower.includes('plano') ||
             msgLower.includes('quanto custa') || msgLower.includes('custo') ||
             msgLower.includes('pagamento') || msgLower.includes('aceita') || msgLower.includes('particular')) {
        
        const greeting = userSession.name ? `${userSession.name}, fico` : 'Fico';
        message.reply(`${greeting} feliz em esclarecer sobre valores e conv√™nios! üòäüí∞\n\nO Dr. Marcos atende:\n‚Ä¢ Diversos conv√™nios m√©dicos\n‚Ä¢ Atendimento particular\n\nMe conta qual conv√™nio voc√™ tem ou se √© particular, que te passo todos os valores certinhos! ‚ù§Ô∏è`);
    }
    
    // Agradecimentos
    else if (msgLower.includes('obrigado') || msgLower.includes('obrigada') || msgLower.includes('valeu') || 
             msgLower.includes('brigado') || msgLower.includes('muito obrigado') ||
             msgLower.includes('agrade√ßo') || msgLower.includes('grato') || msgLower.includes('grata')) {
        
        const greeting = userSession.name ? `${userSession.name}, imagina!` : 'Imagina!';
        message.reply(`${greeting} üòä Fico muito feliz em poder te ajudar!\n\nO Dr. Marcos e eu estamos sempre aqui para voc√™s! Se precisar de mais alguma coisa, pode me chamar a qualquer momento! ‚ù§Ô∏è`);
    }
    
    // Despedidas
    else if (msgLower.includes('tchau') || msgLower.includes('at√© logo') || msgLower.includes('ate logo') || 
             msgLower.includes('bye') || msgLower.includes('at√© mais') || msgLower.includes('falou') ||
             msgLower.includes('xau') || msgLower.includes('at√© breve')) {
        
        const greeting = userSession.name ? `At√© logo, ${userSession.name}!` : 'At√© logo!';
        message.reply(`${greeting} üëã Foi um prazer imenso te ajudar!\n\nQualquer coisa que precisar sobre as consultas com o Dr. Marcos, pode me chamar a qualquer momento! Cuide-se bem! ‚ù§Ô∏èüòä`);
    }
    
    // Resposta padr√£o para qualquer outra mensagem
    else {
        if (!userSession.hasIntroduced) {
            userSession.hasIntroduced = true;
            if (userSession.name) {
                message.reply(`Ol√° ${userSession.name}! üòä Eu sou a Camila, secret√°ria do Dr. Marcos Figarella! Estou muito feliz em poder te ajudar!\n\nPosso te auxiliar com:\n‚Ä¢ üìÖ Agendamentos de consultas\n‚Ä¢ ‚ÑπÔ∏è Informa√ß√µes sobre atendimento\n‚Ä¢ üìç Endere√ßo e hor√°rios\n‚Ä¢ üí∞ Conv√™nios e valores\n\nComo posso te ajudar? ‚ù§Ô∏è`);
            } else {
                userSession.awaitingName = true;
                message.reply('Ol√°! üòä Eu sou a Camila, secret√°ria do Dr. Marcos Figarella! Estou muito feliz em falar com voc√™! Para te atender melhor, qual √© o seu nome? ‚ù§Ô∏è');
            }
        } else {
            const greeting = userSession.name ? `${userSession.name}, posso` : 'Posso';
            message.reply(`${greeting} te ajudar com:\n‚Ä¢ üìÖ Agendamentos de consultas\n‚Ä¢ ‚ÑπÔ∏è Informa√ß√µes sobre atendimento\n‚Ä¢ üìç Endere√ßo e hor√°rios\n‚Ä¢ üí∞ Conv√™nios e valores\n\nO que voc√™ precisa? ‚ù§Ô∏è`);
        }
    }
});

// Evento de desconex√£o
client.on('disconnected', (reason) => {
    console.log('Cliente desconectado:', reason);
    isClientReady = false;
    qrCodeData = '';
    qrCodeImage = '';
});

// Inicializar cliente WhatsApp
client.initialize();

// Configura√ß√£o do servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
    console.log(`Servidor rodando na porta ${PORT}`);
    console.log(`Acesse: http://localhost:${PORT}/whatsapp para ver o QR Code`);
});
